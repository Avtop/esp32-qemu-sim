name: 'Test QEmu'


env:
  QEMU_BIN: ./qemu-git/build/qemu-system-xtensa
  ESPTOOL: ./esptool/esptool.py
  BOOT_APP0_URL: https://github.com/espressif/arduino-esp32/raw/master/tools/partitions/boot_app0.bin
  DEFAULT_DEVICE: esp32
  DEFAULT_BOOTLOADER_ADDR: "0x1000"
  DEFAULT_PARTITIONS_ADDR: "0x8000"
  DEFAULT_BOOT_APP0_ADDR: "0xe000"
  DEFAULT_FIRMWARE_ADDR: "0x10000"
  DEFAULT_SPIFFS_ADDR: "0x290000"
  DEFAULT_FLASH_SIZE: 4
  QEMU_TIMEOUT: 60 # seconds

inputs:
  flash-size:
    description: "Flash Size (MB)"
    default: "4"
    required: true
  qemu-timeout:
    description: "QEmu timeout"
    default: "60"
    required: true
  build-folder:
    description:  "Build folder"
    default: "./build"
    required: true

runs:
  using: "composite"
  steps:

    - name: Retrieve binaries (artifact)
      uses: actions/download-artifact@v3
      with:
        name: Build-dir
        path: ${{ inputs.build-folder }}

    - name: Guess Context
      run: |
        if [[ ! -d "${{ inputs.build-folder }}" ]]; then
          echo "[ERROR] No build folder found, aborting"
          exit 1
        fi

        if [[ ! -d "${{ inputs.flash-size }}" ]]; then
          echo "[ERROR] missing flash size property"
          exit 1
        fi

        if [[ ! -d "${{ inputs.qemu-timeout }}" ]]; then
          echo "[ERROR] missing timeout property"
          exit 1
        fi

        if [[ ! -f "${{ inputs.build-folder }}/partitions.csv" ]]; then
          echo "[ERROR] missing partitions.csv file in build folder"
          exit 1
        fi

        # get a copy of boot_app0.bin
        wget -q ${{ env.BOOT_APP0_URL }}  -O ${{ inputs.build-folder }}/boot_app0.bin

        FLASH_SIZE=${{ inputs.flash-size }}
        cat ${{ inputs.build-folder }}/partitions.csv
        OLD_IFS=$IFS
        csvdata=`cat ${{ inputs.build-folder }}/partitions.csv | tr -d ' ' | tr '\n' ';'` # remove spaces, replace \n by semicolon
        IFS=';' read -ra rows <<< "$csvdata" # split lines
        for index in "${!rows[@]}"
        do
          IFS=',' read -ra csv_columns <<< "${rows[$index]}" # split columns
          case "${csv_columns[0]}" in
            otadata)  BOOT_APP0_ADDR="${csv_columns[3]}" ;;
            app0)     FIRMWARE_ADDR="${csv_columns[3]}"  ;;
            spiffs)   SPIFFS_ADDR="${csv_columns[3]}"    ;;
            *) echo "Ignoring ${csv_columns[0]}:${csv_columns[3]}" ;;
          esac
        done
        ( set -o posix ; set ) | grep _ADDR
        IFS=$OLD_IFS

        if [[ "$BOOT_APP0_ADDR" == "" ]]; then
          echo "[ERROR] No otadata address found in partitions.csv"
          exit 1
        fi
        if [[ "$FIRMWARE_ADDR" == "" ]]; then
          echo "[ERROR] No ota0 address found in partitions.csv"
          exit 1
        fi

        DEVICE=${{ env.DEFAULT_DEVICE }}
        BOOTLOADER_ADDR=${{ env.DEFAULT_BOOTLOADER_ADDR }}
        PARTITIONS_ADDR=${{ env.DEFAULT_PARTITIONS_ADDR }}

        echo "DEVICE=$DEVICE" >> $GITHUB_ENV
        echo "BOOTLOADER_ADDR=$BOOTLOADER_ADDR" >> $GITHUB_ENV
        echo "PARTITIONS_ADDR=$PARTITIONS_ADDR" >> $GITHUB_ENV
        echo "BOOT_APP0_ADDR=$BOOT_APP0_ADDR" >> $GITHUB_ENV
        echo "FIRMWARE_ADDR=$FIRMWARE_ADDR" >> $GITHUB_ENV
        echo "SPIFFS_ADDR=$SPIFFS_ADDR" >> $GITHUB_ENV
        echo "FLASH_SIZE=$FLASH_SIZE" >> $GITHUB_ENV
        # copy build folder from artifact to local folder
        cp ${{ inputs.build-folder }}/*.bin ./


    - name: Cache QEmu build
      uses: actions/cache@v3
      id: cache-qemu
      with:
        path: './qemu-git'
        key: qemu-system-xtensa
        restore-keys: |
          ${{ runner.os }}-qemu-

    - name: ðŸ“¥ Checkout qemu-xtensa with flash size fix
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: listout/qemu
        path: './qemu-git'
        ref: 'fix-flash-size'

    - name: Build QEmu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build cmake
        ninja --version
        cmake --version
        gcc --version
        cd qemu-git
        ./configure --target-list=xtensa-softmmu \
            --enable-gcrypt \
            --enable-debug --enable-sanitizers \
            --disable-strip --disable-user \
            --disable-capstone --disable-vnc \
            --disable-sdl --disable-gtk
        ninja -C ${{ inputs.build-folder }}


    - name: Setup Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup pyserial
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pyserial

    - name: Checkout esptool.py
      uses: actions/checkout@v3
      with:
        repository: espressif/esptool
        path: './esptool'


      - name: Create firmware for QEmu
        run: |
          ${{ env.ESPTOOL }} --chip ${{ env.DEVICE }} merge_bin --fill-flash-size ${{ env.FLASH_SIZE }}MB -o flash_image.bin \
            ${{ env.BOOTLOADER_ADDR }} bootloader.bin \
            ${{ env.PARTITIONS_ADDR }} partitions.bin \
            ${{ env.BOOT_APP0_ADDR }}  boot_app0.bin \
            ${{ env.FIRMWARE_ADDR }}   firmware.bin \
            ${{ env.SPIFFS_ADDR }}     spiffs.bin

      - name: Load firmware in QEmu
        # qemu-system-xtensa -nographic -no-reboot -machine esp32 -drive file=firmware.bin,if=mtd,format=raw
        run: |
          (${{ env.QEMU_BIN }} -nographic -machine esp32 -drive file=flash_image.bin,if=mtd,format=raw | tee -a ./logs.txt) &
          sleep ${{ env.QEMU_TIMEOUT }}
          killall qemu-system-xtensa || true

      - name: Upload logs as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Qemu Logs
          path: |
            ./logs.txt

