name: 'Test QEmu'


env:
  #QEMU_BIN: ./qemu-git/build/qemu-system-xtensa
  #ESPTOOL: ./esptool/esptool.py
  #BOOT_APP0_URL: https://github.com/espressif/arduino-esp32/raw/master/tools/partitions/boot_app0.bin
  #DEFAULT_DEVICE: esp32
  #DEFAULT_BOOTLOADER_ADDR: "0x1000"
  #DEFAULT_PARTITIONS_ADDR: "0x8000"
  #DEFAULT_BOOT_APP0_ADDR: "0xe000"
  #DEFAULT_FIRMWARE_ADDR: "0x10000"
  #DEFAULT_SPIFFS_ADDR: "0x290000"
  #DEFAULT_FLASH_SIZE: 4
  #QEMU_TIMEOUT: 60 # seconds

inputs:
  flash-size:
    description: "Flash Size (MB)"
    default: "4"
  qemu-timeout:
    description: "QEmu timeout"
    default: "60"
  build-folder:
    description:  "Build folder"
    default: ./build
  bootloader-address:
    description: "Bootloader Address"
    default: "0x1000"
  partitions-address:
    description: "Partitions address"
    default: "0x8000"
  spiffs-address:
    description: "Spiffs address"
    default: "0x290000"
  partitions-csv:
    description: "Path to partitions.csv"
    default: partitions.csv
  otadata-bin:
    description: "Path to boot_app0.bin"
    default: boot_app0.bin
  firmware-bin:
    description: "Path to app0.bin"
    default: firmware.bin
  partitions-bin:
    description: "Path to partitions.bin"
    default: partitions.bin
  bootloader-bin:
    description: "Path to bootloader.bin"
    default: bootloader.bin
  spiffs-bin:
    description: "Path to spiffs.bin"
    default: spiffs.bin


runs:
  using: "composite"
  steps:

    # - name: Retrieve binaries (artifact)
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: Build-dir
    #     path: ${{ inputs.build-folder }}

    - name: Validate inputs
      run: validate.sh
      # shell: bash
      # run: |
      #   # TODO: validate/sanitize/restrict build-folder path
      #   if [[ "${{ inputs.build-folder }}" == "" ]]; then
      #     echo "[ERROR] No build folder provided"
      #     exit 1
      #   fi
      #
      #   if [[ ! -d "${{ inputs.build-folder }}" ]]; then
      #     echo "[ERROR] No build folder found, aborting"
      #     exit 1
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.partitions-csv }}" ]]; then
      #     echo "[ERROR] Missing partitions.csv file in build folder"
      #     exit 1
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.otadata-bin }}" ]]; then
      #     echo "[INFO] Fetching a copy of boot_app0.bin from espressif/arduino-esp32 repository"
      #     wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/partitions/boot_app0.bin -O "${{ inputs.build-folder }}/${{ inputs.otadata-bin }}"
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.firmware-bin }}" ]]; then
      #     echo "[ERROR] Missing app0, check your 'firmware-bin' path"
      #     exit 1
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.partitions-bin }}" ]]; then
      #     # TODO: generate partitions.bin from partitions.csv using gen_esp32part.py
      #     echo "[ERROR] Missing partitions.bin, check your 'partitions-bin' path
      #     exit 1
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.bootloader-bin }}" ]]; then
      #     echo "[ERROR] Missing bootloader.bin, check your 'bootloader-bin' path
      #     exit 1
      #   fi
      #
      #   if [[ ! -f "${{ inputs.build-folder }}/${{ inputs.spiffs-bin }}" ]]; then
      #     echo "[INFO] Creating empty SPIFFS file"
      #     touch "${{ inputs.build-folder }}/${{ inputs.spiffs-bin }}"
      #   fi
      #
      #   if [[ "${{ inputs.flash-size }}" =~ '^(2|4|8|16)$' ]]; then
      #     echo "[ERROR] Invalid flash size (valid values=2,4,8,16)"
      #     exit 1
      #   fi
      #
      #   if [[ "${{ inputs.qemu-timeout }}" =~ '^[0-9]{1,3}$' ]]; then
      #     echo "[ERROR] Invalid timeout value (valid values=0...999)"
      #     exit 1
      #   fi
      #
      #   if [[ "${{ inputs.flash-size }}" == "" ]]; then
      #     echo "[ERROR] Missing flash size property"
      #     exit 1
      #   fi
      #
      #   if [[ "${{ inputs.qemu-timeout }}" == "" ]]; then
      #     echo "[ERROR] Missing timeout property"
      #     exit 1
      #   fi
      #
      #   if [[ "${{ inputs.bootloader-address }}" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[ERROR] Invalid bootloader address (valid values=0x0000...0xffffffff)"
      #     exit 1
      #   fi
      #   if [[ "${{ inputs.partitions-address }}" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[ERROR] Invalid bootloader address (valid values=0x0000...0xffffffff)"
      #     exit 1
      #   fi
      #   if [[ "${{ inputs.partitions-address }}" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[ERROR] Invalid bootloader address (valid values=0x0000...0xffffffff)"
      #     exit 1
      #   fi
      #
      #   cat ${{ inputs.build-folder }}/${{ inputs.partitions-csv }}
      #   OLD_IFS=$IFS
      #   csvdata=`cat ${{ inputs.build-folder }}/${{ inputs.partitions-csv }} | tr -d ' ' | tr '\n' ';'` # remove spaces, replace \n by semicolon
      #   IFS=';' read -ra rows <<< "$csvdata" # split lines
      #   for index in "${!rows[@]}"
      #   do
      #     IFS=',' read -ra csv_columns <<< "${rows[$index]}" # split columns
      #     case "${csv_columns[0]}" in
      #       otadata)  BOOT_APP0_ADDR="${csv_columns[3]}" ;;
      #       app0)     FIRMWARE_ADDR="${csv_columns[3]}"  ;;
      #       spiffs)   SPIFFS_ADDR="${csv_columns[3]}"    ;;
      #       *) echo "Ignoring ${csv_columns[0]}:${csv_columns[3]}" ;;
      #     esac
      #   done
      #   ( set -o posix ; set ) | grep _ADDR
      #   IFS=$OLD_IFS
      #
      #   if [[ "$BOOT_APP0_ADDR" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[ERROR] Invalid otadata address in ${{ inputs.partitions-csv }} file"
      #     exit 1
      #   fi
      #
      #   if [[ "$FIRMWARE_ADDR" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[ERROR] Invalid app0 address in ${{ inputs.partitions-csv }} file"
      #     exit 1
      #   fi
      #
      #   if [[ "$SPIFFS_ADDR" =~ '^0x[0-9a-z-A-Z]{1,8}$' ]]; then
      #     echo "[WARNING] Invalid or empty spiffs address extracted from ${{ inputs.partitions-csv }} file, overriding"
      #     $SPIFFS_ADDR="0x290000"
      #   fi
      #
      #   echo "BOOT_APP0_ADDR=$BOOT_APP0_ADDR" >> $GITHUB_ENV
      #   echo "FIRMWARE_ADDR=$FIRMWARE_ADDR" >> $GITHUB_ENV
      #   echo "SPIFFS_ADDR=$SPIFFS_ADDR" >> $GITHUB_ENV

    - name: Cache QEmu build
      uses: actions/cache@v3
      id: cache-qemu
      with:
        path: './qemu-git'
        key: qemu-system-xtensa
        restore-keys: |
          ${{ runner.os }}-qemu-

    - name: ðŸ“¥ Checkout qemu-xtensa with flash size fix
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: listout/qemu
        path: './qemu-git'
        ref: 'fix-flash-size'

    - name: Build QEmu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build cmake
        ninja --version
        cmake --version
        gcc --version
        cd qemu-git
        ./configure --target-list=xtensa-softmmu \
            --enable-gcrypt \
            --enable-debug --enable-sanitizers \
            --disable-strip --disable-user \
            --disable-capstone --disable-vnc \
            --disable-sdl --disable-gtk
        ninja -C ${{ inputs.build-folder }}


    - name: Setup Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup pyserial
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pyserial

    - name: Checkout esptool.py
      uses: actions/checkout@v3
      with:
        repository: espressif/esptool
        path: './esptool'

    - name: Create firmware for QEmu
      shell: bash
      run: |
        ./esptool/esptool.py --chip esp32 merge_bin --fill-flash-size ${{ inputs.flash-size }}MB -o flash_image.bin \
          ${{ inputs.bootloader-address }} ${{ inputs.bootloader-bin }} \
          ${{ inputs.partitions-address }} ${{ inputs.partitions-bin }} \
          ${{ env.BOOT_APP0_ADDR }} ${{ inputs.boot_app0-bin }} \
          ${{ env.FIRMWARE_ADDR }} ${{ inputs.firmware-bin }} \
          ${{ env.SPIFFS_ADDR }} ${{ inputs.spiffs-bin }}

    - name: Load firmware in QEmu
      # qemu-system-xtensa -nographic -no-reboot -machine esp32 -drive file=firmware.bin,if=mtd,format=raw
      shell: bash
      run: |
        (./qemu-git/build/qemu-system-xtensa -nographic -machine esp32 -drive file=flash_image.bin,if=mtd,format=raw | tee -a ./logs.txt) &
        sleep ${{ inputs.qemu-timeout }}
        killall qemu-system-xtensa || true

    - name: Upload logs as artifact
      uses: actions/upload-artifact@v3
      with:
        name: Qemu Logs
        path: |
          ./logs.txt

